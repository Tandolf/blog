{"version":3,"file":"component---src-templates-blog-post-tsx-6a9838c99efce1eb1d15.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/bio.tsx","webpack://gatsby-starter-blog/./src/templates/styles.tsx","webpack://gatsby-starter-blog/./src/templates/blog-post.tsx"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio: React.FC = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            linkedin\n            stack_overflow\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/selfie.jpg\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong>\n          {` `}I dont have twitter but i have{\" \"}\n          <a href={`https://www.linkedin.com/in/${social?.linkedin || ``}`}>\n            linkedin\n          </a>{\" \"}\n          and im on{\" \"}\n          <a href={`https://stackoverflow.com/users/${social?.stack_overflow || ``}`}>\n            stack overflow\n          </a>.\n        </p>\n        )}\n    </div>\n  );\n};\n\nexport default Bio\n","import styled from \"styled-components\";\n\nexport const LinkText = styled.h3`\n    font-size: 18px;\n`;\n\nexport const DateText = styled.h3`\n    font-size: 18px;\n    color: var(--color-gray-700);\n`;\n\n\n","import * as React from \"react\"\nimport { Link, graphql, PageProps } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport \"../dracula.css\"\nimport { DateText, LinkText } from \"./styles\"\nimport TagSection from \"../components/tagSection\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}: PageProps<Queries.BlogPostBySlugQuery>) => {\n  const siteTitle = site?.siteMetadata?.title || `Title`\n  const tags = !post?.frontmatter?.tags ? [] : post.frontmatter.tags.replaceAll(/\\s/g, '').split(',');\n\n  return (\n    <Layout location={location}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header style={{ marginBottom: 30 }}>\n          <h1 itemProp=\"headline\">{post?.frontmatter?.title}</h1>\n          <DateText>{post?.frontmatter?.date}</DateText>\n          <TagSection tags={tags} />\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post?.html || \"\" }}\n          itemProp=\"articleBody\"\n        />\n        <TagSection tags={tags} />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous?.fields?.slug || \"\"} rel=\"prev\">\n                <LinkText>← {previous?.frontmatter?.title || \"\"}</LinkText>\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              \n              <Link to={next?.fields?.slug || \"\"} rel=\"next\">\n                <LinkText>{next?.frontmatter?.title} →</LinkText>\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n      </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }: PageProps<Queries.BlogPostBySlugQuery>) => {\n  return (\n    <Seo\n      title={post?.frontmatter?.title}\n      description={post?.frontmatter?.description || post?.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        tags\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["data","useStaticQuery","author","site","siteMetadata","_data$site$siteMetada","social","_data$site$siteMetada2","React","className","StaticImage","layout","formats","src","width","height","quality","alt","name","href","linkedin","stack_overflow","LinkText","styled","DateText","Head","post","markdownRemark","Seo","title","frontmatter","_post$frontmatter4","description","excerpt","previous","next","location","tags","_post$frontmatter","replaceAll","split","Layout","itemScope","itemType","style","marginBottom","itemProp","_post$frontmatter2","_post$frontmatter3","date","TagSection","dangerouslySetInnerHTML","__html","html","Bio","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel","_next$frontmatter"],"sourceRoot":""}